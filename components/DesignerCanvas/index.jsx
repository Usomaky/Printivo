import React, { Component } from 'react'
import axios from 'axios'
import Carousel from 'nuka-carousel'
import { CORE_API_BASE_URL } from '@/utils/index'
import image from '@/utils/image'
import { computeAddon } from '../RenderAddonSet/renderAddonSetUtil'
import api from '@/services/api'
import { withRouter } from 'next/router'
import UploadInfo from './UploadInfo'

class DesignerCanvas extends Component {
  constructor(props) {
    super(props)

    this.state = {
      // State to hold the design progress
      step: 1,

      // State holding the product object from the API
      product: null,
      design: null,
      dataLoaded: false,

      // States for the images:
      // images -> array of images generated by CC
      images: [],

      price: 0,
      quantity: null,

      basePrice: 0,
      addOnsAvailable: null,
      addOnsSelected: {},

      ccData: {},

      tk: null,
      loading: false,
      save: {
        status: null,
        message: '',
      },
    }

    this.editor = null

    this.openReview = this.openReview.bind(this)
    this.saveDesign = this.saveDesign.bind(this)
    this.chooseAddon = this.chooseAddon.bind(this)
    this.configureCC = this.configureCC.bind(this)
    this.finishDesign = this.finishDesign.bind(this)
    this.defineReviewPage = this.defineReviewPage.bind(this)
    this.changeQuoteSelected = this.changeQuoteSelected.bind(this)
  }

  componentDidMount() {
    // Before unload function.
    window.addEventListener(
      'beforeunload',
      () =>
        'Are you sure you want to leave? Changes made to this design will be lost!',
    )
    window.scrollTo(0, 0)

    // API request for the page
    // this.props.getCart()

    // return false
    axios
      .all([
        axios.get(
          `${CORE_API_BASE_URL}products/${this.props.slug}.json?include=quotes`,
        ),
      ])
      .then(
        axios.spread((firstRes, secondRes) => {
          const product = firstRes.data

          this.setState({
            product,
            design: {
              cc_options: this.props.designData,
              ...this.props.designData.design,
            },
            dataLoaded: true,
          })

          this.configureCC()
          this.defineReviewPage()
        }),
      )
      .catch((err) => {
        console.log(err)
      })
  }

  defineReviewPage() {
    const self = this
    const { product } = this.state

    window.ReviewPage = {
      open(data) {
        this.data = data

        self.setState({ images: data, price: product.minimum_price })
      },

      close() {
        ReviewPage.imgLoadedCount = 0
        ReviewPage.data = undefined
        ReviewPage.currImgIndex = 0

        self.setState({ step: 1 })
      },

      getImageUrls() {
        return ReviewPage.data.proofImageUrls
      },
    }
  }

  //  https://customerscanvas.com/dev/editors/iframe-api/product-definition/mockups.html
  configureCC() {
    // Product definition
    const { design, product } = this.state
    let productDefinition = {}
    const psdFile1 = design && design.psd_file ? design.psd_file : null
    const psdFile2 = design && design.psd_file_2 ? design.psd_file_2 : null

    console.log('product >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ', product);
    console.log('design >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ', design);

    const config = {
      customStyle: 'noPadding',
      userId: null,
      initialMode: 'Advanced',
      widgets: {
        FinishButton: {
          mode: 'disabled',
        },
      },
      preloader: {
        enabled: true,
        errorMessage: 'The Editor failed to load.',
        firstTimeMessage: '',
      },
    }

    // get the iframe's ID
    const iframe = document.getElementById('iframe')
    const firstSurface = {
      printAreas: [{ designFile: psdFile1 }],
      previewMockups: [],
    };
    /*
     * Assume designs with only one psd would have all mockups to first page
     * if only one page, assign all to first surface,
     * if two pages assign first to firstsurface and second to secondsurface
    */
    if (product?.mockup_file) {
      firstSurface['previewMockups'].push({ down: product.mockup_file});
    }
    if (!psdFile2 && product?.mockup_file_2) {
      firstSurface['previewMockups'].push({ down: product.mockup_file_2});
    }
    if (!psdFile2 && product?.mockup_file_3) {
      firstSurface['previewMockups'].push({ down: product.mockup_file_3});
    }

    const surfaces = [];
    surfaces.push(firstSurface);

    if (psdFile2) {
      const secondSurface = {
        printAreas: [{  designFile: psdFile2 }],
        previewMockups: [],
      };

      if (product?.mockup_file_2) {
        secondSurface['previewMockups'].push({ down: product.mockup_file_2});
      }

      surfaces.push(secondSurface);
    }

    console.log('surfaces: ', surfaces);

    if (design !== null) {
      productDefinition = { ...design.cc_options, surfaces }
      // if (design.state === null) {
      //   //productDefinition.surfaces = surfaces;

      // } else {
      //   productDefinition = design.state;
      // }
    }

    if (window.innerWidth < 767) {
      iframe.style.height = `${product.cc_xs_height}px`
    } else if (window.innerWidth >= 768) {
      iframe.style.height = `${product.cc_sm_height}px`
    } else if (window.innerWidth >= 992) {
      iframe.style.height = `${product.cc_md_height}px`
    } else if (window.innerWidth >= 1200) {
      iframe.style.height = `${product.cc_lg_height}px`
    }
    // console.log(JSON.stringify(productDefinition));
    // Load the editor using IframeApi's loadEditor()
    CustomersCanvas.IframeApi.loadEditor(iframe, productDefinition, config)
      .then((res) => {
        this.editor = res
        console.log('Product Definition => ', productDefinition)
      })
      .catch((error) => {
        console.log('Product Definition => ', productDefinition)
        console.error('The editor failed to load with an exception: ', error)
      })
  }

  openReview() {
    // get the add_on, quantity & price entry of the  first quote in the list.
    const {
      product: {
        quotes: {
          0: { add_ons, price, quantity },
        },
      },
    } = this.state
    const iframe = document.getElementById('iframe')
    console.log(iframe.parentNode)
    // LoadMask.maskElement(iframe.parentNode);

    window.removeEventListener(
      'beforeunload',
      () =>
        'Are you sure you want to leave? Changes made to this design will be lost!',
    )

    this.editor
      .finishProductDesign({ proofMaxHeight: 640, proofMaxWidth: 640 })
      .then((result) => {
        const {
          proofImageUrls,
          returnToEditUrl,
          stateId,
          userId,
          hiResOutputUrls,
        } = result
        const addOnsSelected = {}

        const ccData = {
          pdf: hiResOutputUrls[0],
          stateId,
          userId,
          returnToEditUrl,
        }

        ReviewPage.open(proofImageUrls)
        const tempval = Object.values(add_ons)
        const tempkey = Object.keys(add_ons)

        tempval.map((item, index) => {
          const temp = tempkey[index]
          addOnsSelected[temp] = [item[0]]
        })

        this.setState({
          step: 2,
          addOnsAvailable: add_ons,
          basePrice: price,
          quantity,
          price,
          ccData,
          addOnsSelected,
        })
      })
      .catch((error) => {
        // LoadMask.maskElement(iframe.parentNode, 'Some Error Occured! Please Try again', true);
        console.error(
          'Preview images could not be generated with an exception: ',
          error,
        )
      })
  }

  changeQuoteSelected(e) {
    const { price, quantity, add_ons } = JSON.parse(e.target.value)
    const addOnsSelected = {}

    const tempval = Object.values(add_ons)
    const tempkey = Object.keys(add_ons)

    tempval.map((item, index) => {
      const temp = tempkey[index]
      addOnsSelected[temp] = [item[0]]
    })

    this.setState({
      addOnsSelected,
      quantity,
      price,
      basePrice: price,
      addOnsAvailable: add_ons,
    })
  }

  chooseAddon(addonKey, addonvalue, index, addNew, leftover) {
    computeAddon(
      this.state.product,
      this.state.addOnsAvailable,
      this.state.addOnsSelected,
      addonKey,
      addonvalue,
      index,
      addNew,
      leftover,
      this,
      'cc',
    )
  }

  saveDesign() {
    const { user } = this.props
    const { ccData, images, product, design } = this.state
    const { stateId, pdf } = ccData

    const ccBaseUrl = process.env.NEXT_PUBLIC_CC.PREVIEW_BASE_URL
    const tempPreviewUrl = images[0][0].split(ccBaseUrl)
    const tempPdfUrl = pdf.split(ccBaseUrl)
    const data = {
      category_name: product.name,
      product_name: design.name,
      product_id: product.id,
      member_id: user !== null ? user.id : '',
      state_file_name: stateId,
      design_id: design.id,
      pdf_file_name: tempPdfUrl[1],
      page_1_preview: tempPreviewUrl[1],
      page_2_preview:
        images.length > 1
          ? images[1][0].split(ccBaseUrl)[1]
          : images[0][1] && images[0][1].split(ccBaseUrl)[1],
    }
    let save

    if (user == null) {
      save = {
        status: false,
        message: 'You have to be signed in to save a design.',
      }
    } else {
      api
        .post('saved-items.json', data)
        .then((res) => {
          save = {
            status: true,
            message: 'Your Design was saved successfully.',
          }
        })
        .catch((res) => {
          save = {
            status: false,
            message: 'Sorry, some error happened. Please try again.',
          }
        })
        .finally(() => {
          this.setState({ save })
        })
    }
  }

  finishDesign() {
    this.setState({ loading: true })
    const router = this.props.router

    const {
      quantity,
      basePrice,
      design,
      product,
      images,
      ccData,
      price,
      addOnsSelected,
    } = this.state
    const { user, cart, orderData } = this.props
    console.log(cart)
    const ccBaseUrl = process.env.NEXT_PUBLIC_CC.PREVIEW_BASE_URL

    const tempPreviewUrl = images[0][0].split(ccBaseUrl)
    const tempPdfUrl = ccData.pdf.split(ccBaseUrl)
    const data = {
      items: [
        {
          product_id: product.id,
          category_id: product.id,
          design_id: design.id,
          quantity,
          price: basePrice,
          add_ons: addOnsSelected,
          state_file_name: ccData.stateId,
          pdf_file_name: tempPdfUrl[1],
          page_1_preview: tempPreviewUrl[1],
          page_2_preview:
            images.length > 1
              ? images[1][0].split(ccBaseUrl)[1]
              : images[0][1] && images[0][1].split(ccBaseUrl)[1],
          amount: price,
          name: design.name,
          order_status: 'in-cart',
          add_ons_amount: 0,
          item_type: 'cc',
          files: {
            '-1_-1.pdf': tempPdfUrl[1],
          },
        },
      ],
    }

    console.log(this.props)
    console.log(data)
    // return false

    if (cart) {
      data.items.order_id = cart.id
      console.log('Cart found')

      api
        .patch(`orders/${orderData.id}.json`, data)
        .then((res) => {
          console.log('Successfully added item!', res)
          // window.fbq("track", "AddToCart");
          router.push('/cart')
        })
        .catch((err) => {
          console.log('An Error occured', err)
          this.setState({ loading: false })
        })
    } else if (!cart) {
      console.log('Cart Not found')

      api
        .post('orders.json', data)
        .then((res) => {
          console.log('Successfully created a store!', res)
          // window.fbq('track', 'AddToCart')
          // window.location.href = `/cart?added=${product.slug}`
        })
        .catch((err) => {
          console.log('An Error occured', err)
        })
    }
  }

  render() {
    const {
      step,
      images,
      product,
      addOnsSelected,
      basePrice,
      quantity,
      dataLoaded,
      save,
      loading,
    } = this.state
    const swRoot = '/p3-demo/icons'
    let totalPrice = parseFloat(basePrice)

    const addOnsSelectedValuesArray = Object.values(addOnsSelected)

    addOnsSelectedValuesArray.forEach((item) => {
      if (item[0] && item[0].price) {
        totalPrice += parseFloat(item[0].price);
      }
    })
    return (
      <section>
        <div>
          {dataLoaded ? (
            <div className="w-full mx-auto my-6 mb-32">
              <div className="content-container mx-auto">
                {step === 1 && (
                  <div className="w-full">
                    <h1 className="font-dm text-blue-dark font-32 mb-8">
                      Customize Design
                    </h1>
                    <button
                      onClick={() => this.props.router.back()}
                      className="back-to py-1 px-2.5 mb-10 inline-block text-sm font-sf--bold"
                    >
                      <span>Back</span>
                    </button>
                    <div className="w-full">
                      <iframe
                        title={step}
                        style={{ border: 'none', width: '100%' }}
                        className="w-full"
                        id="iframe"
                      />
                      <button
                        type="button"
                        className="bg-red-light font-sans font-semibold w-64 py-4 text-white text-center bg-tivo-magenta float-right my-5"
                        onClick={this.openReview}
                      >
                        Proceed review →
                      </button>
                    </div>
                  </div>
                )}

                {step === 2 && (
                  <div className="w-full mt-10">
                    <div className="w-full">
                      <h3>Preview</h3>
                    </div>

                    <div className="w-full flex flex-col md:flex-row py-5">
                      <div className="w-full md:w-3/5 relative flex flex-col mb-10 md:mb-0 md:pr-10">
                        <div className="w-full mb-5 h-auto flex flex-col relative md:sticky md:top-0 md:pt-5">
                          {images.length > 1 || images[0].length > 1 ? (
                            <Carousel
                              dragging
                              autoplayInterval={4000}
                              autoplay
                              slidesToShow={1}
                              slidesToScroll={1}
                              width="100%"
                              wrapAround
                              renderCenterLeftControls={({ previousSlide }) => (
                                <button
                                  type="button"
                                  className="p-3"
                                  onClick={previousSlide}
                                >
                                  <img
                                    src={image.getCloudinaryUrlFromS3Path(
                                      `${swRoot}/previous-icon.png`,
                                    )}
                                    className="w-6"
                                    alt="Previous"
                                  />
                                </button>
                              )}
                              renderCenterRightControls={({ nextSlide }) => (
                                <button
                                  type="button"
                                  className="p-3"
                                  onClick={nextSlide}
                                >
                                  <img
                                    src={image.getCloudinaryUrlFromS3Path(
                                      `${swRoot}/next-icon.png`,
                                    )}
                                    className="w-6"
                                    alt="Next"
                                  />
                                </button>
                              )}
                            >
                              {images.length > 1 &&
                                images.map((item) => (
                                  <img
                                    style={{ width: '500px', height: '500px' }}
                                    src={item}
                                    alt=""
                                    key={item}
                                    className="w-auto mx-auto"
                                  />
                                ))}
                              {images[0].length > 1 &&
                                images[0].map((item) => (
                                  <img
                                    style={{ width: '500px', height: '500px' }}
                                    src={item}
                                    alt=""
                                    key={item}
                                    className="w-auto mx-auto"
                                  />
                                ))}
                            </Carousel>
                          ) : (
                            <img
                              src={images[0][0]}
                              alt="Product"
                              className="h-full w-auto mx-auto"
                            />
                          )}
                          <div className="w-full flex justify-center">
                            <button
                              type="button"
                              onClick={() => {
                                this.setState({ step: 1 }, () => {
                                  this.configureCC()
                                })
                              }}
                              className="w-64 py-3 mt-5 border border-tivo-magenta text-center
                            text-tivo-magenta hover:bg-red-light hover:text-white"
                            >
                              ← Back to Design
                            </button>
                          </div>
                        </div>
                      </div>

                      <div className="w-full sm:w-3/4 md:w-2/5 sm:px-5 flex flex-col mx-auto">
                        <div className="w-full flex">
                          <div className="pl-3 w-1/2">
                            <button
                              type="button"
                              disabled={loading}
                              className={`bg-red-light font-sans text-white text-center py-3 w-full ${
                                loading
                                  ? 'h-16 bg-grey-light'
                                  : 'bg-tivo-magenta'
                              }`}
                              // onClick={this.finishDesign}
                              onClick={() => {
                                this.setState({ step: 3 })
                              }}
                            >
                              {/* {loading ? (
                                <img
                                  className="h-full py-4 w-full"
                                  src={image.getCloudinaryUrlFromS3Path(
                                    "/img/tivo-loader-90px.gif"
                                  )}
                                  alt="Loading product..."
                                />
                              ) : (
                                "PROCEED"
                              )} */}
                              Proceed
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                {step === 3 && (
                  <UploadInfo
                    product={this.state.product}
                    ccData={this.state.ccData}
                    images={images}
                  />
                )}
              </div>
            </div>
          ) : (
            <div>
              <div className="w-full flex max-w-4xl mx-auto my-16">
                <img
                  src={image.getCloudinaryUrlFromS3Path(
                    '/img/tivo-loader-90px.gif',
                  )}
                  alt="Loading..."
                  className="p-5 mx-auto"
                />
              </div>
            </div>
          )}
        </div>
      </section>
    )
  }
}

export default withRouter(DesignerCanvas)
